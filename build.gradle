plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.github.node-gradle.node" version "7.0.1"
}

group = 'com.weatherapp'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // All your existing backend dependencies remain here
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Add this line for email functionality
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// --- Frontend Build Configuration (Corrected) ---
node {
    // Version of Node.js to use for the build.
    version = '18.18.2'
    // Specifies where to download and unpack Node.js.
    workDir = file("${project.buildDir}/node")
    // Tells the plugin to download Node.js if it's not already available.
    download = true
}

// The node-gradle plugin creates the 'npmInstall' task automatically.
// We just need to configure it to run in the correct directory.
tasks.named('npmInstall') {
    workingDir = file("${project.projectDir}/frontend")
}

// The plugin also creates a task for each script in package.json.
// For the 'build' script, it creates 'npm_run_build'. We configure it here.
tasks.named('npm_run_build') {
    workingDir = file("${project.projectDir}/frontend")
    // The build must run after dependencies are installed.
    dependsOn 'npmInstall'
}

// This is our custom task to copy the built frontend into the backend's resources.
// Since we are creating this task ourselves, we use the 'task' keyword.
task copyFrontend(type: Copy) {
    description = "Copies the frontend build to the backend's static resources"
    from "$projectDir/frontend/build"
    into "$buildDir/resources/main/static"
    // It must run after the frontend is built.
    dependsOn 'npm_run_build'
}

// Finally, we hook our custom task into the main build process.
processResources.dependsOn 'copyFrontend'


tasks.named('test') {
    useJUnitPlatform()
}
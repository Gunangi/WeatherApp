plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.example.weatherapp'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    springBootVersion = '3.2.1'
    springCloudVersion = '2023.0.0'
    mongoDriverVersion = '4.11.1'
    jacksonVersion = '2.16.1'
    validationApiVersion = '3.0.2'
    junitVersion = '5.10.1'
    mockitoVersion = '5.8.0'
    testcontainersVersion = '1.19.3'
    swaggerVersion = '2.2.0'
    mapstructVersion = '1.5.5.Final'
    resilience4jVersion = '2.2.0'
    caffeineVersion = '3.1.8'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Spring Cloud
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

    // MongoDB
    implementation "org.mongodb:mongodb-driver-sync:${mongoDriverVersion}"
    implementation "org.mongodb:mongodb-driver-core:${mongoDriverVersion}"
    implementation "org.mongodb:bson:${mongoDriverVersion}"

    // JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"

    // Validation
    implementation "jakarta.validation:jakarta.validation-api:${validationApiVersion}"
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // HTTP Client
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'

    // JWT Authentication
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${swaggerVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${swaggerVersion}"

    // Caching
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Circuit Breaker & Resilience
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"

    // Mapping
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Scheduling
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation 'org.springframework:spring-context-support'

    // Metrics and Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation 'com.google.guava:guava:32.1.3-jre'

    // Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Push Notifications
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // Geolocation Services
    implementation 'com.maxmind.geoip2:geoip2:4.2.0'

    // Image Processing (for weather icons)
    implementation 'org.apache.commons:commons-imaging:1.0.0-alpha5'

    // Configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:mongodb:${testcontainersVersion}"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'com.jayway.jsonpath:json-path:2.8.0'

    // Test Runtime
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Java Compiler Configuration
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Compiler Arguments
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
            '-parameters',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=WARN'
    ]
}

// Spring Boot Configuration
springBoot {
    buildInfo {
        properties {
            additional = [
                    'description': 'Comprehensive Weather Application',
                    'version': project.version,
                    'name': project.name
            ]
        }
    }
}

// Test Configuration
test {
    useJUnitPlatform()
    systemProperties = [
            'spring.profiles.active': 'test'
    ]
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
    }
    finalizedBy jacocoTestReport
}

// JaCoCo Configuration
jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

// Checkstyle Configuration
checkstyle {
    toolVersion = '10.12.5'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

// JAR Configuration
jar {
    archiveBaseName = 'weather-app'
    archiveVersion = project.version
    enabled = false
    dependsOn bootJar
}

bootJar {
    archiveBaseName = 'weather-app'
    archiveVersion = project.version
    archiveClassifier = ''

    manifest {
        attributes(
                'Implementation-Title': 'Weather Application',
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Weather App Team',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss'),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': 'com.example.weatherapp.WeatherAppApplication'
        )
    }
}

// Custom Tasks
task generateApiDocs(type: JavaExec) {
    group = 'documentation'
    description = 'Generate OpenAPI documentation'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.springdoc.openapi.gradle.plugin.OpenApiGeneratorTask'
}

task dockerBuild(type: Exec) {
    group = 'docker'
    description = 'Build Docker image'
    commandLine 'docker', 'build', '-t', "weather-app:${project.version}", '.'
    dependsOn bootJar
}

task dockerRun(type: Exec) {
    group = 'docker'
    description = 'Run Docker container'
    commandLine 'docker', 'run', '-p', '8080:8080', "weather-app:${project.version}"
    dependsOn dockerBuild
}

// Wrapper Configuration
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Build Optimization
tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

// Environment-specific profiles
if (project.hasProperty('prod')) {
    bootRun {
        args = ['--spring.profiles.active=prod']
    }
} else if (project.hasProperty('dev')) {
    bootRun {
        args = ['--spring.profiles.active=dev']
    }
} else {
    bootRun {
        args = ['--spring.profiles.active=local']
    }
}

// Performance Optimization
tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
}
compileJava {
    inputs.files(bootBuildInfo)
}

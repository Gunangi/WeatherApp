package com.example.weatherapp.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

@Document(collection = "forecast_data")
@CompoundIndexes({
        @CompoundIndex(name = "location_type_date_idx", def = "{'latitude': 1, 'longitude': 1, 'forecastType': 1, 'forecastDate': 1}"),
        @CompoundIndex(name = "city_type_date_idx", def = "{'cityName': 1, 'forecastType': 1, 'forecastDate': 1}")
})
public class ForecastData {

    @Id
    private String id;

    // Location information
    @NotNull(message = "City name is required")
    @Indexed
    private String cityName;

    @NotNull(message = "Country is required")
    private String country;

    private String state;
    private String region;

    @NotNull(message = "Latitude is required")
    @DecimalMin(value = "-90.0", message = "Latitude must be between -90 and 90")
    @DecimalMax(value = "90.0", message = "Latitude must be between -90 and 90")
    private Double latitude;

    @NotNull(message = "Longitude is required")
    @DecimalMin(value = "-180.0", message = "Longitude must be between -180 and 180")
    @DecimalMax(value = "180.0", message = "Longitude must be between -180 and 180")
    private Double longitude;

    private String timezone;
    private Long timezoneOffset;

    // Forecast metadata
    @NotNull(message = "Forecast type is required")
    @Indexed
    private ForecastType forecastType; // HOURLY, DAILY, EXTENDED

    @NotNull(message = "Forecast date is required")
    @Indexed
    private LocalDate forecastDate;

    private LocalDateTime forecastDateTime; // For hourly forecasts
    private Integer forecastDays; // Number of days for extended forecasts
    private Integer forecastHours; // Number of hours for hourly forecasts

    // Daily forecast data
    private DailyForecast dailyForecast;

    // Hourly forecast data (list of hourly predictions)
    private List<HourlyForecast> hourlyForecasts = new ArrayList<>();

    // Data source and quality
    private String dataSource;
    private String apiVersion;
    private Double confidence; // Forecast confidence 0-1
    private String modelVersion; // Weather model version used

    // Timestamps
    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;

    private LocalDateTime expiresAt;
    private LocalDateTime generatedAt; // When the forecast was generated by the weather service

    // Additional metadata
    private Map<String, Object> additionalData;

    // Nested classes for forecast data structures
    public static class DailyForecast {
        // Temperature data
        private Double minTemperature;
        private Double maxTemperature;
        private Double morningTemperature;
        private Double dayTemperature;
        private Double eveningTemperature;
        private Double nightTemperature;

        // Feels like temperatures
        private Double minFeelsLike;
        private Double maxFeelsLike;
        private Double morningFeelsLike;
        private Double dayFeelsLike;
        private Double eveningFeelsLike;
        private Double nightFeelsLike;

        // Weather conditions
        private String weatherCondition;
        private String weatherDescription;
        private String weatherIcon;
        private Integer weatherId;

        // Atmospheric data
        private Double humidity;
        private Double pressure;
        private Double seaLevelPressure;
        private Double groundLevelPressure;

        // Wind data
        private WindForecast wind = new WindForecast();

        // Precipitation
        private PrecipitationForecast precipitation = new PrecipitationForecast();

        // Cloud coverage
        private Double cloudiness;

        // UV Index
        private Double uvIndex;
        private String uvIndexCategory;

        // Sun data
        private LocalTime sunrise;
        private LocalTime sunset;
        private Long dayLength;

        // Moon data
        private String moonPhase;
        private LocalTime moonrise;
        private LocalTime moonset;

        // Visibility
        private Double visibility;

        // Additional daily metrics
        private Double dewPoint;
        private Integer airQualityIndex;
        private String airQualityCategory;

        // Getters and Setters
        public Double getMinTemperature() { return minTemperature; }
        public void setMinTemperature(Double minTemperature) { this.minTemperature = minTemperature; }

        public Double getMaxTemperature() { return maxTemperature; }
        public void setMaxTemperature(Double maxTemperature) { this.maxTemperature = maxTemperature; }

        public Double getMorningTemperature() { return morningTemperature; }
        public void setMorningTemperature(Double morningTemperature) { this.morningTemperature = morningTemperature; }

        public Double getDayTemperature() { return dayTemperature; }
        public void setDayTemperature(Double dayTemperature) { this.dayTemperature = dayTemperature; }

        public Double getEveningTemperature() { return eveningTemperature; }
        public void setEveningTemperature(Double eveningTemperature) { this.eveningTemperature = eveningTemperature; }

        public Double getNightTemperature() { return nightTemperature; }
        public void setNightTemperature(Double nightTemperature) { this.nightTemperature = nightTemperature; }

        public Double getMinFeelsLike() { return minFeelsLike; }
        public void setMinFeelsLike(Double minFeelsLike) { this.minFeelsLike = minFeelsLike; }

        public Double getMaxFeelsLike() { return maxFeelsLike; }
        public void setMaxFeelsLike(Double maxFeelsLike) { this.maxFeelsLike = maxFeelsLike; }

        public Double getMorningFeelsLike() { return morningFeelsLike; }
        public void setMorningFeelsLike(Double morningFeelsLike) { this.morningFeelsLike = morningFeelsLike; }

        public Double getDayFeelsLike() { return dayFeelsLike; }
        public void setDayFeelsLike(Double dayFeelsLike) { this.dayFeelsLike = dayFeelsLike; }

        public Double getEveningFeelsLike() { return eveningFeelsLike; }
        public void setEveningFeelsLike(Double eveningFeelsLike) { this.eveningFeelsLike = eveningFeelsLike; }

        public Double getNightFeelsLike() { return nightFeelsLike; }
        public void setNightFeelsLike(Double nightFeelsLike) { this.nightFeelsLike = nightFeelsLike; }

        public String getWeatherCondition() { return weatherCondition; }
        public void setWeatherCondition(String weatherCondition) { this.weatherCondition = weatherCondition; }

        public String getWeatherDescription() { return weatherDescription; }
        public void setWeatherDescription(String weatherDescription) { this.weatherDescription = weatherDescription; }

        public String getWeatherIcon() { return weatherIcon; }
        public void setWeatherIcon(String weatherIcon) { this.weatherIcon = weatherIcon; }

        public Integer getWeatherId() { return weatherId; }
        public void setWeatherId(Integer weatherId) { this.weatherId = weatherId; }

        public Double getHumidity() { return humidity; }
        public void setHumidity(Double humidity) { this.humidity = humidity; }

        public Double getPressure() { return pressure; }
        public void setPressure(Double pressure) { this.pressure = pressure; }

        public Double getSeaLevelPressure() { return seaLevelPressure; }
        public void setSeaLevelPressure(Double seaLevelPressure) { this.seaLevelPressure = seaLevelPressure; }

        public Double getGroundLevelPressure() { return groundLevelPressure; }
        public void setGroundLevelPressure(Double groundLevelPressure) { this.groundLevelPressure = groundLevelPressure; }

        public WindForecast getWind() { return wind; }
        public void setWind(WindForecast wind) { this.wind = wind; }

        public PrecipitationForecast getPrecipitation() { return precipitation; }
        public void setPrecipitation(PrecipitationForecast precipitation) { this.precipitation = precipitation; }

        public Double getCloudiness() { return cloudiness; }
        public void setCloudiness(Double cloudiness) { this.cloudiness = cloudiness; }

        public Double getUvIndex() { return uvIndex; }
        public void setUvIndex(Double uvIndex) { this.uvIndex = uvIndex; }

        public String getUvIndexCategory() { return uvIndexCategory; }
        public void setUvIndexCategory(String uvIndexCategory) { this.uvIndexCategory = uvIndexCategory; }

        public LocalTime getSunrise() { return sunrise; }
        public void setSunrise(LocalTime sunrise) { this.sunrise = sunrise; }

        public LocalTime getSunset() { return sunset; }
        public void setSunset(LocalTime sunset) { this.sunset = sunset; }

        public Long getDayLength() { return dayLength; }
        public void setDayLength(Long dayLength) { this.dayLength = dayLength; }

        public String getMoonPhase() { return moonPhase; }
        public void setMoonPhase(String moonPhase) { this.moonPhase = moonPhase; }

        public LocalTime getMoonrise() { return moonrise; }
        public void setMoonrise(LocalTime moonrise) { this.moonrise = moonrise; }

        public LocalTime getMoonset() { return moonset; }
        public void setMoonset(LocalTime moonset) { this.moonset = moonset; }

        public Double getVisibility() { return visibility; }
        public void setVisibility(Double visibility) { this.visibility = visibility; }

        public Double getDewPoint() { return dewPoint; }
        public void setDewPoint(Double dewPoint) { this.dewPoint = dewPoint; }

        public Integer getAirQualityIndex() { return airQualityIndex; }
        public void setAirQualityIndex(Integer airQualityIndex) { this.airQualityIndex = airQualityIndex; }

        public String getAirQualityCategory() { return airQualityCategory; }
        public void setAirQualityCategory(String airQualityCategory) { this.airQualityCategory = airQualityCategory; }
    }

    public static class HourlyForecast {
        private LocalDateTime dateTime;
        private Double temperature;
        private Double feelsLike;
        private String weatherCondition;
        private String weatherDescription;
        private String weatherIcon;
        private Integer weatherId;
        private Double humidity;
        private Double pressure;
        private WindForecast wind = new WindForecast();
        private PrecipitationForecast precipitation = new PrecipitationForecast();
        private Double cloudiness;
        private Double visibility;
        private Double uvIndex;
        private Double dewPoint;
        private Integer airQualityIndex;

        // Getters and Setters
        public LocalDateTime getDateTime() { return dateTime; }
        public void setDateTime(LocalDateTime dateTime) { this.dateTime = dateTime; }

        public Double getTemperature() { return temperature; }
        public void setTemperature(Double temperature) { this.temperature = temperature; }

        public Double getFeelsLike() { return feelsLike; }
        public void setFeelsLike(Double feelsLike) { this.feelsLike = feelsLike; }

        public String getWeatherCondition() { return weatherCondition; }
        public void setWeatherCondition(String weatherCondition) { this.weatherCondition = weatherCondition; }

        public String getWeatherDescription() { return weatherDescription; }
        public void setWeatherDescription(String weatherDescription) { this.weatherDescription = weatherDescription; }

        public String getWeatherIcon() { return weatherIcon; }
        public void setWeatherIcon(String weatherIcon) { this.weatherIcon = weatherIcon; }

        public Integer getWeatherId() { return weatherId; }
        public void setWeatherId(Integer weatherId) { this.weatherId = weatherId; }

        public Double getHumidity() { return humidity; }
        public void setHumidity(Double humidity) { this.humidity = humidity; }

        public Double getPressure() { return pressure; }
        public void setPressure(Double pressure) { this.pressure = pressure; }

        public WindForecast getWind() { return wind; }
        public void setWind(WindForecast wind) { this.wind = wind; }

        public PrecipitationForecast getPrecipitation() { return precipitation; }
        public void setPrecipitation(PrecipitationForecast precipitation) { this.precipitation = precipitation; }

        public Double getCloudiness() { return cloudiness; }
        public void setCloudiness(Double cloudiness) { this.cloudiness = cloudiness; }

        public Double getVisibility() { return visibility; }
        public void setVisibility(Double visibility) { this.visibility = visibility; }

        public Double getUvIndex() { return uvIndex; }
        public void setUvIndex(Double uvIndex) { this.uvIndex = uvIndex; }

        public Double getDewPoint() { return dewPoint; }
        public void setDewPoint(Double dewPoint) { this.dewPoint = dewPoint; }

        public Integer getAirQualityIndex() { return airQualityIndex; }
        public void setAirQualityIndex(Integer airQualityIndex) { this.airQualityIndex = airQualityIndex; }
    }

    public static class WindForecast {
        private Double speed;
        private Double direction;
        private String directionName;
        private Double gust;
        private Double maxGust; // Maximum expected gust

        public WindForecast() {}

        public WindForecast(Double speed, Double direction) {
            this.speed = speed;
            this.direction = direction;
            this.directionName = getDirectionName(direction);
        }

        private static String getDirectionName(Double direction) {
            if (direction == null) return null;

            String[] directions = {"N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE",
                    "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"};
            int index = (int) Math.round(direction / 22.5) % 16;
            return directions[index];
        }

        // Getters and Setters
        public Double getSpeed() { return speed; }
        public void setSpeed(Double speed) { this.speed = speed; }

        public Double getDirection() { return direction; }
        public void setDirection(Double direction) {
            this.direction = direction;
            this.directionName = getDirectionName(direction);
        }

        public String getDirectionName() { return directionName; }
        public void setDirectionName(String directionName) { this.directionName = directionName; }

        public Double getGust() { return gust; }
        public void setGust(Double gust) { this.gust = gust; }

        public Double getMaxGust() { return maxGust; }
        public void setMaxGust(Double maxGust) { this.maxGust = maxGust; }
    }

    public static class PrecipitationForecast {
        private Double probability; // Probability of precipitation (0-100%)
        private Double amount; // Expected precipitation amount in mm
        private Double minAmount; // Minimum expected amount
        private Double maxAmount; // Maximum expected amount
        private String type; // "rain", "snow", "sleet", "none"
        private Double intensity; // Precipitation intensity (mm/h)
        private Double snowDepth; // Expected snow depth in cm

        // Getters and Setters
        public Double getProbability() { return probability; }
        public void setProbability(Double probability) { this.probability = probability; }

        public Double getAmount() { return amount; }
        public void setAmount(Double amount) { this.amount = amount; }

        public Double getMinAmount() { return minAmount; }
        public void setMinAmount(Double minAmount) { this.minAmount = minAmount; }

        public Double getMaxAmount() { return maxAmount; }
        public void setMaxAmount(Double maxAmount) { this.maxAmount = maxAmount; }

        public String getType() { return type; }
        public void setType(String type) { this.type = type; }

        public Double getIntensity() { return intensity; }
        public void setIntensity(Double intensity) { this.intensity = intensity; }

        public Double getSnowDepth() { return snowDepth; }
        public void setSnowDepth(Double snowDepth) { this.snowDepth = snowDepth; }
    }

    // Enums
    public enum ForecastType {
        HOURLY,     // 24-48 hour hourly forecast
        DAILY,      // 5-7 day daily forecast
        EXTENDED    // 10-16 day extended forecast
    }

    // Constructors
    public ForecastData() {}

    public ForecastData(String cityName, String country, Double latitude, Double longitude, ForecastType forecastType) {
        this.cityName = cityName;
        this.country = country;
        this.latitude = latitude;
        this.longitude = longitude;
        this.forecastType = forecastType;
        this.generatedAt = LocalDateTime.now();
    }

    // Utility methods
    public boolean isForecastExpired() {
        return expiresAt != null && LocalDateTime.now().isAfter(expiresAt);
    }

    public String getFullLocationName() {
        StringBuilder location = new StringBuilder(cityName);
        if (state != null && !state.isEmpty()) {
            location.append(", ").append(state);
        } else if (region != null && !region.isEmpty()) {
            location.append(", ").append(region);
        }
        location.append(", ").append(country);
        return location.toString();
    }

    public int getHourlyForecastCount() {
        return hourlyForecasts != null ? hourlyForecasts.size() : 0;
    }

    public boolean hasHourlyData() {
        return hourlyForecasts != null && !hourlyForecasts.isEmpty();
    }

    public boolean hasDailyData() {
        return dailyForecast != null;
    }

    // Main getters and setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getCityName() { return cityName; }
    public void setCityName(String cityName) { this.cityName = cityName; }

    public String getCountry() { return country; }
    public void setCountry(String country) { this.country = country; }

    public String getState() { return state; }
    public void setState(String state) { this.state = state; }

    public String getRegion() { return region; }
    public void setRegion(String region) { this.region = region; }

    public Double getLatitude() { return latitude; }
    public void setLatitude(Double latitude) { this.latitude = latitude; }

    public Double getLongitude() { return longitude; }
    public void setLongitude(Double longitude) { this.longitude = longitude; }

    public String getTimezone() { return timezone; }
    public void setTimezone(String timezone) { this.timezone = timezone; }

    public Long getTimezoneOffset() { return timezoneOffset; }
    public void setTimezoneOffset(Long timezoneOffset) { this.timezoneOffset = timezoneOffset; }

    public ForecastType getForecastType() { return forecastType; }
    public void setForecastType(ForecastType forecastType) { this.forecastType = forecastType; }

    public LocalDate getForecastDate() { return forecastDate; }
    public void setForecastDate(LocalDate forecastDate) { this.forecastDate = forecastDate; }

    public LocalDateTime getForecastDateTime() { return forecastDateTime; }
    public void setForecastDateTime(LocalDateTime forecastDateTime) { this.forecastDateTime = forecastDateTime; }

    public Integer getForecastDays() { return forecastDays; }
    public void setForecastDays(Integer forecastDays) { this.forecastDays = forecastDays; }

    public Integer getForecastHours() { return forecastHours; }
    public void setForecastHours(Integer forecastHours) { this.forecastHours = forecastHours; }

    public DailyForecast getDailyForecast() { return dailyForecast; }
    public void setDailyForecast(DailyForecast dailyForecast) { this.dailyForecast = dailyForecast; }

    public List<HourlyForecast> getHourlyForecasts() { return hourlyForecasts; }
    public void setHourlyForecasts(List<HourlyForecast> hourlyForecasts) { this.hourlyForecasts = hourlyForecasts; }

    public String getDataSource() { return dataSource; }
    public void setDataSource(String dataSource) { this.dataSource = dataSource; }

    public String getApiVersion() { return apiVersion; }
    public void setApiVersion(String apiVersion) { this.apiVersion = apiVersion; }

    public Double getConfidence() { return confidence; }
    public void setConfidence(Double confidence) { this.confidence = confidence; }

    public String getModelVersion() { return modelVersion; }
    public void setModelVersion(String modelVersion) { this.modelVersion = modelVersion; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    public LocalDateTime getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }

    public LocalDateTime getExpiresAt() { return expiresAt; }
    public void setExpiresAt(LocalDateTime expiresAt) { this.expiresAt = expiresAt; }

    public LocalDateTime getGeneratedAt() { return generatedAt; }
    public void setGeneratedAt(LocalDateTime generatedAt) { this.generatedAt = generatedAt; }

    public Map<String, Object> getAdditionalData() { return additionalData; }
    public void setAdditionalData(Map<String, Object> additionalData) { this.additionalData = additionalData; }

    @Override
    public String toString() {
        return "ForecastData{" +
                "id='" + id + '\'' +
                ", cityName='" + cityName + '\'' +
                ", country='" + country + '\'' +
                ", forecastType=" + forecastType +
                ", forecastDate=" + forecastDate +
                ", hourlyCount=" + getHourlyForecastCount() +
                ", hasDailyData=" + hasDailyData() +
                '}';
    }
}